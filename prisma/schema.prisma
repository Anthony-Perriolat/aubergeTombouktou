// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  lastName   String
  firstName  String
  email      String    @unique
  phone      String
  nationality String
  permission String    @default("customer")
  password   String
  bookings   Booking[]
}

model Article {
  id           Int               @id @default(autoincrement())
  title        String            @unique @db.VarChar(128)
  description  String            @db.VarChar(255)
  content      String            @db.VarChar(8000)
  date_publish DateTime          @default(now())
  date_update  DateTime?         @updatedAt
  images       ImageArticle[]
  categorie    CategorieArticle? @relation(fields: [categorieId], references: [id])
  categorieId  Int?
}

model ImageArticle {
  id          Int      @id @default(autoincrement())
  title       String   @unique @db.VarChar(128)
  description String?  @db.VarChar(255)
  urlStorage  String
  article     Article? @relation(fields: [articleId], references: [id])
  articleId   Int?
}

model CategorieArticle {
  id          Int       @id @default(autoincrement())
  title       String    @unique @db.VarChar(128)
  description String    @db.VarChar(255)
  articles    Article[]
}

model Room {
  id                  Int         @id @default(autoincrement())
  name                String      @unique @db.VarChar(128)
  description         String?     @db.VarChar(255)
  personNumberPerRoom Int?        @default(1)
  price               Float
  bed                 Int?        @default(1)
  Booking             Booking[]
  ImageRoom           ImageRoom[]
}

model ImageRoom {
  id          Int     @id @default(autoincrement())
  title       String  @unique @db.VarChar(128)
  description String? @db.VarChar(255)
  urlStorage  String
  room        Room?   @relation(fields: [roomId], references: [id])
  roomId      Int?
}

model Booking {
  id                  Int       @id @default(autoincrement())
  uuid                String    @unique @default(uuid())
  phone               String
  email               String
  dateCheckIn         DateTime
  dateCheckOut        DateTime
  duration            Int
  personNumber        Int       @default(0)
  comment             String?
  user                User      @relation(fields: [userId], references: [id])
  userId              Int
  room                Room      @relation(fields: [roomId], references: [id])
  roomId              Int
  hasPaid             Boolean   @default(false)
  price               Float
  stripePaymentIntent String?
  createdOn           DateTime  @default(now())
  updatedOn           DateTime  @updatedAt
  paymentDate         DateTime?
}
